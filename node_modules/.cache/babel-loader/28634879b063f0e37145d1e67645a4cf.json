{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/tic-tac-toe-thomas-chantelle/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport GameOverWin from './components/gameoverWin';\nimport GameOverTie from './components/gameoverTie';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = click => {\n      //this function will ONLY run if the location of the click has an empty string (meaning it hasn't been clicked before)\n      if (this.state.squares[click] === \"\" && this.state.gameoverWin === false) {\n        //changes inside the box to the player's mark (x or 0)\n        //it maps through the squares array and if the index matches where we clicked, that's the one that changes\n        this.setState({\n          squares: this.state.squares.map((value, index) => {\n            if (click === index) {\n              return this.state.player;\n            } else {\n              // value here just means that if it wasn't clicked, it doesn't change\n              return value;\n            }\n          })\n        }); //changes the player\n\n        if (this.state.player === \"X\") {\n          this.setState({\n            player: \"O\"\n          });\n        } else this.setState({\n          player: \"X\"\n        });\n      }\n    };\n\n    this.checkWinner = () => {\n      //it will ONLY run if the game has not ended\n      if (this.state.gameoverWin === false && this.state.gameoverTie === false) {\n        //destructures all the indexes of the grid\n        var zero = this.state.squares[0];\n        var one = this.state.squares[1];\n        var two = this.state.squares[2];\n        var three = this.state.squares[3];\n        var four = this.state.squares[4];\n        var five = this.state.squares[5];\n        var six = this.state.squares[6];\n        var seven = this.state.squares[7];\n        var eight = this.state.squares[8]; //creating our winning scenarios\n        // to compare 3 things, only 2 things need to match 1 thin g --- a=b and a=c, then b must = c. Also it makes sure empty strings matching don't trigger a win.\n        //3 columns\n\n        if (zero === three && zero === six && zero !== \"\") {\n          this.setState({\n            gameoverWin: true\n          });\n        } else if (one === four && one === seven && one !== \"\") {\n          this.setState({\n            gameoverWin: true\n          });\n        } else if (two === five && two === eight && two !== \"\") {\n          this.setState({\n            gameoverWin: true\n          }); //3 rows\n        } else if (zero === one && zero === two && zero !== \"\") {\n          this.setState({\n            gameoverWin: true\n          });\n        } else if (three === four && three === five && three !== \"\") {\n          this.setState({\n            gameoverWin: true\n          });\n        } else if (six === seven && six === eight && six !== \"\") {\n          this.setState({\n            gameoverWin: true\n          }); //2 diagonal\n        } else if (zero === four && zero === eight && zero !== \"\") {\n          this.setState({\n            gameoverWin: true\n          });\n        } else if (two === four && two === six && two !== \"\") {\n          this.setState({\n            gameoverWin: true\n          });\n        } //no winner\n        //if there are no more empty strings, then the grid is full and no one wins.\n        else if (!this.state.squares.includes(\"\")) {\n            this.setState({\n              gameoverTie: true\n            });\n          }\n      }\n    };\n\n    this.clear = () => {\n      this.setState({\n        squares: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        player: \"X\",\n        gameoverWin: false,\n        gameoverTie: false\n      });\n    };\n\n    this.state = {\n      squares: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      player: \"X\",\n      gameoverWin: false,\n      gameoverTie: false\n    };\n  } //what makes the changes happen\n\n\n  //allows stuff to show up on screen\n  render() {\n    //this takes in the array of squares, and for each index in the array, it creates a component that operates individually\n    let square = this.state.squares.map((value, index) => {\n      return React.createElement(Square, {\n        value: value,\n        index: index,\n        handleChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      });\n    });\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.checkWinner(), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Tic Tac Toe\"), React.createElement(\"div\", {\n      id: \"whoseturn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"It is \", this.state.player, \"'s turn.\")), React.createElement(\"div\", {\n      className: \"centerscreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, square))), React.createElement(\"div\", {\n      className: \"centerscreen  wintiealerts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.state.gameoverWin && React.createElement(GameOverWin, {\n      player: this.state.player,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), this.state.gameoverTie && React.createElement(GameOverTie, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"centerscreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.clear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Play Again\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/tic-tac-toe-thomas-chantelle/src/App.js"],"names":["React","Component","Square","GameOverWin","GameOverTie","App","constructor","props","handleChange","click","state","squares","gameoverWin","setState","map","value","index","player","checkWinner","gameoverTie","zero","one","two","three","four","five","six","seven","eight","includes","clear","render","square"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport GameOverWin from './components/gameoverWin'\nimport GameOverTie from './components/gameoverTie'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      squares: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      player: \"X\",\n      gameoverWin: false,\n      gameoverTie: false\n    }\n  }\n  //what makes the changes happen\n  handleChange = (click) =>  {\n    //this function will ONLY run if the location of the click has an empty string (meaning it hasn't been clicked before)\n    if (this.state.squares[click] === \"\" && this.state.gameoverWin ===false) {\n      //changes inside the box to the player's mark (x or 0)\n      //it maps through the squares array and if the index matches where we clicked, that's the one that changes\n      this.setState({ squares: this.state.squares.map((value,index) => {\n        if (click === index) {\n          return this.state.player\n        } else {\n          // value here just means that if it wasn't clicked, it doesn't change\n          return value;\n        }\n      })})\n      \n      //changes the player\n      if (this.state.player === \"X\")  {\n        this.setState({ player: \"O\"})\n      } else this.setState({ player: \"X\"})\n    }\n  }\n  // checks if any of our winning scenarios have occurred\n  checkWinner = () => {\n    //it will ONLY run if the game has not ended\n   if (this.state.gameoverWin === false && this.state.gameoverTie === false){\n    //destructures all the indexes of the grid\n    var zero = this.state.squares[0]\n    var one = this.state.squares[1]\n    var two = this.state.squares[2]\n    var three = this.state.squares[3]\n    var four = this.state.squares[4]\n    var five = this.state.squares[5]\n    var six = this.state.squares[6]\n    var seven = this.state.squares[7]\n    var eight = this.state.squares[8]\n    \n    //creating our winning scenarios\n    // to compare 3 things, only 2 things need to match 1 thin g --- a=b and a=c, then b must = c. Also it makes sure empty strings matching don't trigger a win.\n    //3 columns\n    if (zero === three && zero === six && zero !== \"\"){\n      this.setState ({gameoverWin: true }) \n    } else if (one === four && one === seven && one !== \"\"){\n      this.setState ({gameoverWin: true }) \n    } else if (two === five && two === eight && two !== \"\"){\n      this.setState ({gameoverWin: true }) \n    //3 rows\n    } else if (zero === one && zero === two && zero !== \"\"){\n      this.setState ({gameoverWin: true }) \n    } else if (three === four && three === five && three !== \"\"){\n      this.setState ({gameoverWin: true }) \n    } else if (six === seven && six === eight && six !== \"\"){\n      this.setState ({gameoverWin: true }) \n    //2 diagonal\n    } else if (zero === four && zero === eight && zero !== \"\"){\n      this.setState ({gameoverWin: true }) \n    } else if (two === four && two === six && two !== \"\"){\n      this.setState ({gameoverWin: true }) \n    } \n    //no winner\n    //if there are no more empty strings, then the grid is full and no one wins.\n    else if (!this.state.squares.includes(\"\")){\n      this.setState ({gameoverTie: true }) \n\n    }\n  }}\n// clears the grid and resets all our states back to the original\n  clear = () =>{\n    this.setState ({\n      squares: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      player: \"X\",\n      gameoverWin: false,\n      gameoverTie: false\n    })\n  }\n\n  //allows stuff to show up on screen\n  render(){\n    //this takes in the array of squares, and for each index in the array, it creates a component that operates individually\n    let square = this.state.squares.map((value, index)=> {\n      return (\n        <Square\n        value = { value }\n        index = { index }\n        handleChange = { this.handleChange }\n        />\n      )\n    })\n\n    return(\n      <React.Fragment>\n        {/* every time the program is updated (something is clicked) it will run the checkWinner method to see if a winning scenario has occurred. */}\n        {this.checkWinner()}\n        <h1>Tic Tac Toe</h1>\n        {/* all the divs are to separate values to make the css work properly */}\n        <div id=\"whoseturn\">\n          <h2>It is {this.state.player}'s turn.</h2>\n        </div>\n        <div className=\"centerscreen\">\n          <div id=\"holder\">\n            <div id=\"grid\">\n              { square }\n            </div>\n          </div>\n        </div>\n        <div className=\"centerscreen  wintiealerts\">\n          {/* there are two conditional renders that control if the winning text is displayed or if the tie text is displayed */}\n          {this.state.gameoverWin && < GameOverWin player = {this.state.player}/>}\n          {this.state.gameoverTie && < GameOverTie/>}\n        </div>\n        <div className=\"centerscreen\">\n          <button onClick = {this.clear}>Play Again</button>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}